// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: S8ibk3gsheuu
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Navbar from "../../Navbar"; // plasmic-import: enh9McLsl2W4/component
import NavBarComponent from "../../NavBarComponent"; // plasmic-import: CO0eUIMHnwzG/component
import FullStatusComponent from "../../FullStatusComponent"; // plasmic-import: nh8gERyM6vlh/component
import LineChartComponent from "../../LineChartComponent"; // plasmic-import: 8VetN6Mh0lIl/component
import TablePieChartComponent from "../../TablePieChartComponent"; // plasmic-import: B0adBUCTRclN/component
import FooterComponent from "../../FooterComponent"; // plasmic-import: 0dff0RkiWsWX/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicDashboardPage2.module.css"; // plasmic-import: S8ibk3gsheuu/css

createPlasmicElementProxy;

export const PlasmicDashboardPage2__VariantProps = new Array();

export const PlasmicDashboardPage2__ArgProps = new Array();

const $$ = {};

function PlasmicDashboardPage2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ycSwv)}>
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <NavBarComponent
              data-plasmic-name={"navBarComponent"}
              data-plasmic-override={overrides.navBarComponent}
              className={classNames("__wab_instance", sty.navBarComponent)}
            />

            <FullStatusComponent
              data-plasmic-name={"fullStatusComponent"}
              data-plasmic-override={overrides.fullStatusComponent}
              className={classNames("__wab_instance", sty.fullStatusComponent)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__brrJ7)}>
              <LineChartComponent
                data-plasmic-name={"lineChartComponent"}
                data-plasmic-override={overrides.lineChartComponent}
                className={classNames("__wab_instance", sty.lineChartComponent)}
              />
              <TablePieChartComponent
                data-plasmic-name={"tablePieChartComponent"}
                data-plasmic-override={overrides.tablePieChartComponent}
                className={classNames(
                  "__wab_instance",
                  sty.tablePieChartComponent
                )}
                // query={$queries.query}
              />
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__l1CoQ)} />
            <FooterComponent
              data-plasmic-name={"footerComponent"}
              data-plasmic-override={overrides.footerComponent}
              className={classNames("__wab_instance", sty.footerComponent)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "navBarComponent",
    "fullStatusComponent",
    "lineChartComponent",
    "tablePieChartComponent",
    "footerComponent"
  ],

  navbar: ["navbar"],
  navBarComponent: ["navBarComponent"],
  fullStatusComponent: ["fullStatusComponent"],
  lineChartComponent: ["lineChartComponent"],
  tablePieChartComponent: ["tablePieChartComponent"],
  footerComponent: ["footerComponent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboardPage2__ArgProps,
          internalVariantPropNames: PlasmicDashboardPage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboardPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardPage2";
  } else {
    func.displayName = `PlasmicDashboardPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardPage2 = Object.assign(
  // Top-level PlasmicDashboardPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    navBarComponent: makeNodeComponent("navBarComponent"),
    fullStatusComponent: makeNodeComponent("fullStatusComponent"),
    lineChartComponent: makeNodeComponent("lineChartComponent"),
    tablePieChartComponent: makeNodeComponent("tablePieChartComponent"),
    footerComponent: makeNodeComponent("footerComponent"),
    // Metadata about props expected for PlasmicDashboardPage2
    internalVariantProps: PlasmicDashboardPage2__VariantProps,
    internalArgProps: PlasmicDashboardPage2__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboardPage2;
/* prettier-ignore-end */

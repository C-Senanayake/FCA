// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: 8VetN6Mh0lIl
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicLineChartComponent.module.css"; // plasmic-import: 8VetN6Mh0lIl/css
import * as d3 from "d3";
import d3Timeseries from "d3-timeseries";
import ReactApexChart from 'react-apexcharts'
import { UndoOutlined } from "@ant-design/icons";
import fluctuatedData from "../../../data/fluctuated_arrays.json";
createPlasmicElementProxy;

export const PlasmicLineChartComponent__VariantProps = new Array();

export const PlasmicLineChartComponent__ArgProps = new Array();

const $$ = {};

const UPDATE_INTERVAL = 10000;
const ARRAY_LENGTH = 400 ;

function PlasmicLineChartComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  
  const percentageValues = Array.from({ length: ARRAY_LENGTH }, () => Math.floor(Math.random() * (100)));
  const arrays = [
      fluctuatedData.Cu, fluctuatedData.Ni, fluctuatedData.NiE, fluctuatedData.NA1, fluctuatedData.NA2
      // Array 1: 10% - 95%
      // Array.from({ length: ARRAY_LENGTH }, () => Math.floor(Math.random() * (95 - 30 + 1)) + 10),
    
      // // Array 2: 10% - 40%
      // Array.from({ length: ARRAY_LENGTH }, () => Math.floor(Math.random() * (40 - 10 + 1)) + 10),
    
      // // Array 3: 0% - 30%
      // Array.from({ length: ARRAY_LENGTH }, () => Math.floor(Math.random() * (30 - 0 + 1))),
    
      // // Array 4: 0% - 30%
      // Array.from({ length: ARRAY_LENGTH }, () => Math.floor(Math.random() * (30 - 0 + 1))),
    
      // // Array 5: 0% - 30%
      // Array.from({ length: ARRAY_LENGTH }, () => Math.floor(Math.random() * (30 - 0 + 1)))
  ]
  
  
  
  const generateData = (startDate, count) => {
    const data = [];
    let baseTime = new Date(startDate).getTime();
  
    for (let i = 0; i < count; i++) {
      data.push([
        baseTime,
        arrays[0][i],
        arrays[1][i],
        arrays[2][i],
        arrays[3][i],
        arrays[4][i],
      ]);
      baseTime +=  UPDATE_INTERVAL;
    }
    return {
      dataCu: data.map(d => [d[0], d[1]]),
      dataNi: data.map(d => [d[0], d[2]]),
      dataNiE: data.map(d => [d[0], d[3]]),
      dataNA2: data.map(d => [d[0], d[4]]),
      dataNA3: data.map(d => [d[0], d[5]]),
    };
};

const { dataCu, dataNi, dataNiE, dataNA2, dataNA3 } = generateData("2025-03-19", ARRAY_LENGTH);
const [range, setRange] = React.useState(new Date("2025-03-19").getTime() + ARRAY_LENGTH*1000);
const [state, setState] = React.useState({
  series: [
    { name: "Cu", data: dataCu },
    { name: "Ni", data: dataNi },
    { name: "NiE", data: dataNiE },
    { name: "NA2", data: dataNA2 },
    { name: "NA3", data: dataNA3 },
  ],
  options: {
    chart: {
      id: "chart2",
      type: "line",
      height: "100%",
      background: "transparent",
      toolbar: { autoSelected: "pan", show: false },
      zoom: { enabled: true },
    },
    colors: ["#FB8F67", "#FF5733", "#3498DB", "#2ECC71", "#9B59B6"],
    stroke: { width: [2, 2, 2, 2, 2], curve: ['straight','straight','straight','straight','straight'] },
    dataLabels: { enabled: false },
    fill: { opacity: 1 },
    markers: { size: 0 },
    yaxis: {
      title: { text: "Percentage %", style: { color: "#FFD700" } },
      labels: { style: { colors: "#FFD700" } },
    },
    annotations: {
      yaxis: [
        {
          y: 66, // Position of the horizontal line
          strokeDashArray: 10,
          borderColor: '#FFD700',
          fillColor: '#FFD700',
          label: {
            text: 'AVG(Cu)', // Optional: Add a label
            style: {
              color: '#FFFFFF', // Optional: Set the label color
              background: 'rgba(255,255,255,0.1)'
            }
          }
        }
      ]
    },
    xaxis: {
      type: "datetime",
      labels: { style: { colors: "#FFD700" } },
    },
    legend: {
      floating: true,
      fontSize:"16px",
      fontWeight:600,
      itemMargin: {
        vertical: -2
      },
      styles:{
        marginLeft:"400px"
      },  
      position: "top",
      horizontalAlign: "left",
      labels: { colors: "#FFD700" },
    },
  },
  seriesLine: [
    { name: "Cu", data: dataCu },
    { name: "Ni", data: dataNi },
    { name: "NiE", data: dataNiE },
    { name: "NA2", data: dataNA2 },
    { name: "NA3", data: dataNA3 },
  ],
  optionsLine: {
    chart: {
      id: "chart1",
      type: "line",
      background: "rgba(255, 255, 255, 0.1)",
      brush: { target: "chart2", enabled: true },
      selection: {
        enabled: true,
      },
    },
    colors: ["#FB8F67", "#FF5733", "#3498DB", "#2ECC71", "#9B59B6"],
    stroke: { width: [2, 2, 2, 2, 2], curve: ['straight','straight','straight','straight','straight'] },
    fill: { type: "gradient", gradient: { opacityFrom: 0.91, opacityTo: 0.61 } },
    xaxis: {
      show:false,
      type: "datetime",
      labels: { style: { colors: "#FFD700" } },
      tooltip: { enabled: true },
    },
    legend: { show: false },
    yaxis: { 
      labels: { style: { colors: "#FFD700" } ,
      axisTicks: {
        show: true,
        color: '#008FFB'
      }
    } },
  },
});

React.useEffect(() => {
  const interval = setInterval(() => {
    setState(prevState => {
      const newTime = prevState.series[0].data[prevState.series[0].data.length - 1][0] + UPDATE_INTERVAL;
      const index = (prevState.series[0].data.length) ;
      console.log("PREV::",prevState);
      
      return {
        ...prevState,
        series: prevState.series.map((series, i) => ({
          ...series,
          data: [...series.data, [newTime, arrays[i][(index + i) % arrays[0].length]]],
        })),
        seriesLine: prevState.seriesLine.map((series, i) => ({
          ...series,
          data: [...series.data, [newTime, arrays[i][(index + i) % arrays[0].length]]],
        })),
      };
    });
  }, UPDATE_INTERVAL);

  return () => clearInterval(interval);
}, []);

const handleRangeChange = (hours, newRange) => {
  setRange(newRange);
  console.log("INLLL::",hours);
  
  if(hours === 25){
    setState(prevState => {    
      return {
        ...prevState,
        series: prevState.seriesLine
      };
    });
  }else{
    const index = Math.floor(newRange / UPDATE_INTERVAL) > ARRAY_LENGTH ? 150 : Math.floor(newRange / UPDATE_INTERVAL) ;
    setState(prevState => {    
      return {
        ...prevState,
        series: prevState.series.map((series, i) => ({
          ...series,
          data: [...series.data.slice(index)],
        }))
      };
    });
  }
};

  return (
    <div style={{ width: "100vw", background: "transparent", marginTop:"8px", height:"-webkit-fill-available", padding:"0px 0px 2% 0px" }}>
  <div id="wrapper" style={{height:"100%"}}>
  <div style={{ display: "flex", justifyContent: "flex-end", marginBottom: "0px", marginRight:"20px", zIndex: 2 , position:"absolute", right:"30px"}}>
            {[[1, "1h"], [2, "2h"], [4, "4h"], [6, "6h"], [24, "24h"], [25, <UndoOutlined />]].map(([hours, label]) => (
                <button key={hours} onClick={() => handleRangeChange(hours,hours * 60 * 60 * 1000)}
                    style={{ marginLeft: "10px", padding: "5px 10px", background: "rgba(255,255,255,0.1)", color:"white", border: "none", borderRadius: "5px", cursor: "pointer" }}>
                    {label}
                </button>
            ))}
        </div>
    <div id="chart-line2"  style={{height:"78%"}}>
      <ReactApexChart options={state.options} series={state.series} type="line" height={"100%"} />
    </div>
    <div id="chart-line"  style={{height:"20%"}}>
      <ReactApexChart options={state.optionsLine} series={state.seriesLine} type="line" height={"100%"} />
    </div>
  </div>
</div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLineChartComponent__ArgProps,
          internalVariantPropNames: PlasmicLineChartComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLineChartComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLineChartComponent";
  } else {
    func.displayName = `PlasmicLineChartComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicLineChartComponent = Object.assign(
  // Top-level PlasmicLineChartComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLineChartComponent
    internalVariantProps: PlasmicLineChartComponent__VariantProps,
    internalArgProps: PlasmicLineChartComponent__ArgProps
  }
);

export default PlasmicLineChartComponent;
/* prettier-ignore-end */

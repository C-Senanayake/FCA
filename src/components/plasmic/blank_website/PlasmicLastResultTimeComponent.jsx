// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: g_aHnyxvdW1f
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicLastResultTimeComponent.module.css"; // plasmic-import: g_aHnyxvdW1f/css

createPlasmicElementProxy;

export const PlasmicLastResultTimeComponent__VariantProps = new Array();

export const PlasmicLastResultTimeComponent__ArgProps = new Array();

const $$ = {};

function PlasmicLastResultTimeComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const [time, setTime] = React.useState(new Date());

  React.useEffect(() => {
    const interval = setInterval(() => {
      setTime(new Date());
    }, 10000);

    return () => clearInterval(interval);
  }, []);
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div style={{display:"flex", flexDirection:"row", justifyContent:"center", alignItems:"baseline", color:"#FAB611"}}>
          <span className={classNames(projectcss.all, projectcss.__wab_text, sty.text__upEq6)}>
            {`Last Result : `}
          </span>
          <div style={{display:"flex", flexDirection:"column", justifyContent:"start", alignItems:"left", color:"#FAB611"}}>
            <span className={classNames(projectcss.all, projectcss.__wab_text, sty.text___1SWb6)}>
              {time.toLocaleTimeString()}
            </span>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__liio8
            )}
          >
            {`${time.toLocaleDateString()}`}
          </div>
          </div>
        </div>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLastResultTimeComponent__ArgProps,
          internalVariantPropNames: PlasmicLastResultTimeComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLastResultTimeComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLastResultTimeComponent";
  } else {
    func.displayName = `PlasmicLastResultTimeComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicLastResultTimeComponent = Object.assign(
  // Top-level PlasmicLastResultTimeComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicLastResultTimeComponent
    internalVariantProps: PlasmicLastResultTimeComponent__VariantProps,
    internalArgProps: PlasmicLastResultTimeComponent__ArgProps
  }
);

export default PlasmicLastResultTimeComponent;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: -K3huKWfaZz7
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicTableComponent.module.css"; // plasmic-import: -K3huKWfaZz7/css
import { Table } from "antd";
import { ArrowDownOutlined, ArrowUpOutlined } from "@ant-design/icons";

createPlasmicElementProxy;

export const PlasmicTableComponent__VariantProps = new Array();

export const PlasmicTableComponent__ArgProps = new Array("query");

const $$ = {};

function PlasmicTableComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
    
    // Initial Table Data
    const initialData = [
      { key: 1, name: "Cu % - No calibration", current: 3.2, avg5min: 3.17, avg30min: 3.17, avg1h: 3.17 },
      { key: 2, name: "Ni ppm - No calibration", current: 2.15, avg5min: 2.15, avg30min: 2.15, avg1h: 2.15 },
      { key: 3, name: "NiE ppm - No calibration", current: 0.93, avg5min: 0.94, avg30min: 0.94, avg1h: 0.94 },
      { key: 4, name: "NA2 % - No calibration", current: 1.6, avg5min: 1.61, avg30min: 1.61, avg1h: 1.61 },
      { key: 5, name: "NA3 % - No calibration", current: 7.57, avg5min: 7.5, avg30min: 7.5, avg1h: 7.5 },
    ];

    const getRandomChange = (value) => {
      const change = (Math.random() * 0.1 - 0.05).toFixed(2);
      return parseFloat((value + parseFloat(change)).toFixed(2));
    };

    const [data, setData] = React.useState(initialData);

    React.useEffect(() => {
      const interval = setInterval(() => {
        setData((prevData) =>
          prevData.map((row) => ({
            ...row,
            previous: row.current,
            current: getRandomChange(row.current),
          }))
        );
      }, 10000);
      return () => clearInterval(interval);
    }, []);
  
    // const columns = [
    //   {
    //     title: "Results",
    //     dataIndex: "name",
    //     key: "name",
    //     render: (text) => <span style={{ color: "gold" }}>{text}</span>,
    //   },
    //   {
    //     title: "Current",
    //     dataIndex: "current",
    //     key: "current",
    //     render: (text, record) => {
    //       const isIncrease = record.previous !== undefined && text > record.previous;
    //       const isDecrease = record.previous !== undefined && text < record.previous;
    //       return (
    //         <span style={{ color: "gold" }}>
    //           {isIncrease ? (
    //             <ArrowUpOutlined style={{ color: "green" }} />
    //           ) : isDecrease ? (
    //             <ArrowDownOutlined style={{ color: "red" }} />
    //           ) : null}
    //           {" "}{text}
    //         </span>
    //       );
    //     },
    //   },
    //   {
    //     title: "5 min avg",
    //     dataIndex: "avg5min",
    //     key: "avg5min",
    //     render: (text) => <span style={{ color: "gold" }}>{text}</span>,
    //   },
    //   {
    //     title: "1/2 h avg",
    //     dataIndex: "avg30min",
    //     key: "avg30min",
    //     render: (text) => <span style={{ color: "gold" }}>{text}</span>,
    //   },
    //   {
    //     title: "1 h avg",
    //     dataIndex: "avg1h",
    //     key: "avg1h",
    //     render: (text) => <span style={{ color: "gold" }}>{text}</span>,
    //   },
    // ];


    return (
    //   <div style={{ width: "50%", height: "100%", overflow: "auto", background: "transparent" }}>
    //   <Table
    //     columns={columns}
    //     dataSource={data}
    //     pagination={false}
    //     bordered
    //     style={{
    //       background: "rgba(255, 255, 255, 0.05)", // Light transparent shading
    //     }}
    //     // scroll={{ y: "calc(100vh - 200px)" }} // Auto height adjustment
    //     size="middle"
    //     rowClassName={() => "custom-row"}
    //   />
    // </div>
    <div className={classNames("__wab_instance", sty.table_container)} >
      <table className={classNames("__wab_instance", sty.custom_table)}>
        <thead className={classNames("__wab_instance", sty.thead)}>
          <tr className={classNames("__wab_instance", sty.tr)}>
            <th className={classNames("__wab_instance", sty.th)}>Results</th>
            <th className={classNames("__wab_instance", sty.th)}>Current</th>
            <th className={classNames("__wab_instance", sty.th)}>5 min avg</th>
            <th className={classNames("__wab_instance", sty.th)}>1/2 h avg</th>
            <th className={classNames("__wab_instance", sty.th)}>1 h avg</th>
          </tr>
        </thead>
        <tbody className={classNames("__wab_instance", sty.tbody)}>
          {data.map((row,index) => {
            const isIncrease = row.previous !== undefined && row.current > row.previous;
            const isDecrease = row.previous !== undefined && row.current < row.previous;

            return (
              index%2==1 ? (
              <tr className={classNames("__wab_instance", sty.tr)} key={row.key}>
                <td className={classNames("__wab_instance", sty.td)}>{row.name}</td>
                {isIncrease ? (
                  <td className={classNames("__wab_instance", sty.tdg)}>
                  {" "}{row.current}
                    <span className="arrow up"><ArrowUpOutlined style={{ color: "green" }} /></span>
                </td>
                ) : isDecrease ? (
                  <td className={classNames("__wab_instance", sty.tdr)}>
                  {" "}{row.current}
                    <span className="arrow up"><ArrowDownOutlined style={{ color: "red" }} /></span>
                </td>
                ) : (
                  <td className={classNames("__wab_instance", sty.td)}>
                    {row.current}
                  </td>
                )}
                <td className={classNames("__wab_instance", sty.td)}>{row.avg5min}</td>
                <td className={classNames("__wab_instance", sty.td)}>{row.avg30min}</td>
                <td className={classNames("__wab_instance", sty.td)}>{row.avg1h}</td>
              </tr>
              ):
              (
              <tr className={classNames("__wab_instance", sty.tt)} key={row.key}>
                <td className={classNames("__wab_instance", sty.tdt)}>{row.name}</td>
                {isIncrease ? (
                  <td className={classNames("__wab_instance", sty.tdg)}>
                  {" "}{row.current}
                    <span className="arrow up"><ArrowUpOutlined style={{ color: "green" }} /></span>
                </td>
                ) : isDecrease ? (
                  <td className={classNames("__wab_instance", sty.tdr)}>
                  {" "}{row.current}
                    <span className="arrow up"><ArrowDownOutlined style={{ color: "red" }} /></span>
                </td>
                ) : (
                  <td className={classNames("__wab_instance", sty.tdt)}>
                    {row.current}
                  </td>
                )}
                <td className={classNames("__wab_instance", sty.tdt)}>{row.avg5min}</td>
                <td className={classNames("__wab_instance", sty.tdt)}>{row.avg30min}</td>
                <td className={classNames("__wab_instance", sty.tdt)}>{row.avg1h}</td>
              </tr>
              )
            );
          })}
        </tbody>
      </table>
    </div>
    );
}

const PlasmicDescendants = {
  table: ["table"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTableComponent__ArgProps,
          internalVariantPropNames: PlasmicTableComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTableComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "table") {
    func.displayName = "PlasmicTableComponent";
  } else {
    func.displayName = `PlasmicTableComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicTableComponent = Object.assign(
  // Top-level PlasmicTableComponent renders the root element
  makeNodeComponent("table"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTableComponent
    internalVariantProps: PlasmicTableComponent__VariantProps,
    internalArgProps: PlasmicTableComponent__ArgProps
  }
);

export default PlasmicTableComponent;
/* prettier-ignore-end */

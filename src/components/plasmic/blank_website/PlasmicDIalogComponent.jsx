// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: QkKy4L4tidRw
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: sJyyP7LQrFN0/component
import Select from "../../Select"; // plasmic-import: peRoiGm2qygF/component
import MenuItem from "../../MenuItem"; // plasmic-import: UOVEY_hSmjMi/component
import { AntdDateRangePicker } from "@plasmicpkgs/antd5/skinny/registerDateRangePicker";
import { dateRangePickerHelpers as AntdDateRangePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDateRangePicker";
import Button from "../../Button"; // plasmic-import: EIPRLKugj2CH/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicDIalogComponent.module.css"; // plasmic-import: QkKy4L4tidRw/css

createPlasmicElementProxy;

export const PlasmicDIalogComponent__VariantProps = new Array();

export const PlasmicDIalogComponent__ArgProps = new Array("isGenerate");

const $$ = {};

function PlasmicDIalogComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isGenerate: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dateRangePicker.startDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec(
          "startDate",
          AntdDateRangePicker_Helpers
        )
      },
      {
        path: "dateRangePicker.endDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec(
          "endDate",
          AntdDateRangePicker_Helpers
        )
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__tLoW)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__irox0)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__c9FWf
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Cut-Off"}
              </span>
            </React.Fragment>
          </div>
          <FormItemWrapper
            data-plasmic-name={"formField"}
            data-plasmic-override={overrides.formField}
            className={classNames("__wab_instance", sty.formField)}
            initialValue={40}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hJxi
                )}
              >
                {"Cut-Off"}
              </div>
            }
            noLabel={true}
          >
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              defaultValue={"40"}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"]).apply(
                  null,
                  eventArgs
                );
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </FormItemWrapper>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___2KVbl)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qbciu
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Choose Element:"}
              </span>
            </React.Fragment>
          </div>
          <Select
            data-plasmic-name={"select"}
            data-plasmic-override={overrides.select}
            className={classNames("__wab_instance", sty.select)}
            initialSelectedValue={"item1"}
            items={
              <React.Fragment>
                <MenuItem label={"Cu"} value={"item1"} />
                <MenuItem label={"Ni"} value={"item2"} />
                <MenuItem label={"NiE"} value={"item3"} />
                <MenuItem label={"NA2"} value={"item3"} />
                <MenuItem label={"NA3"} value={"item3"} />
              </React.Fragment>
            }
            label={"Choose Elemant"}
            onChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["select", "value"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showLabel={false}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___7XltH)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7BoYr
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Date Range"}
              </span>
            </React.Fragment>
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.dateRangePicker),
              endDate: generateStateValueProp($state, [
                "dateRangePicker",
                "endDate"
              ]),
              onChange: async (...eventArgs) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "startDate",
                  ["dateRangePicker", "startDate"],
                  AntdDateRangePicker_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "endDate",
                  ["dateRangePicker", "endDate"],
                  AntdDateRangePicker_Helpers
                ).apply(null, eventArgs);
              },
              popupScopeClassName: sty["dateRangePicker__dateRangePickerPopup"],
              showTime: false,
              size: "large",
              startDate: generateStateValueProp($state, [
                "dateRangePicker",
                "startDate"
              ])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "startDate",
                  plasmicStateName: "dateRangePicker.startDate"
                },
                {
                  name: "endDate",
                  plasmicStateName: "dateRangePicker.endDate"
                }
              ],

              [],
              AntdDateRangePicker_Helpers ?? {},
              child$Props
            );
            return (
              <AntdDateRangePicker
                data-plasmic-name={"dateRangePicker"}
                data-plasmic-override={overrides.dateRangePicker}
                {...child$Props}
              />
            );
          })()}
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5WGh8)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__gaxjL)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hravO
                )}
              >
                {"Generate"}
              </div>
            }
            onClick={async event => {
              const $steps = {};
              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = { operation: 0 };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          />

          <Button
            className={classNames("__wab_instance", sty.button__u5AU)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wO8NP
                )}
              >
                {"Export"}
              </div>
            }
          />
        </Stack__>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "formField", "textInput", "select", "dateRangePicker"],
  formField: ["formField", "textInput"],
  textInput: ["textInput"],
  select: ["select"],
  dateRangePicker: ["dateRangePicker"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDIalogComponent__ArgProps,
          internalVariantPropNames: PlasmicDIalogComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDIalogComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDIalogComponent";
  } else {
    func.displayName = `PlasmicDIalogComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicDIalogComponent = Object.assign(
  // Top-level PlasmicDIalogComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    formField: makeNodeComponent("formField"),
    textInput: makeNodeComponent("textInput"),
    select: makeNodeComponent("select"),
    dateRangePicker: makeNodeComponent("dateRangePicker"),
    // Metadata about props expected for PlasmicDIalogComponent
    internalVariantProps: PlasmicDIalogComponent__VariantProps,
    internalArgProps: PlasmicDIalogComponent__ArgProps
  }
);

export default PlasmicDIalogComponent;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: FrcvFACn13Uh
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import RadioGroup from "../../RadioGroup"; // plasmic-import: 7zuKOIv73Phq/component
import Radio from "../../Radio"; // plasmic-import: ejTEwJ4RVLY1/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicRadioGroupComponent.module.css"; // plasmic-import: FrcvFACn13Uh/css

createPlasmicElementProxy;

export const PlasmicRadioGroupComponent__VariantProps = new Array();

export const PlasmicRadioGroupComponent__ArgProps = new Array();

const $$ = {};

function PlasmicRadioGroupComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div style={{display:"flex", flexDirection:"row", justifyContent:"center", alignItems:"center", color:"#FAB611"}}>
      {/* <div className={`${classNames(sty.or_spacer_vertical,sty.left)}`}>
        <div className={`${classNames(sty.mask)}`}/>
      </div> */}
      <RadioGroup
        data-plasmic-name={"radioGroup"}
        data-plasmic-override={overrides.radioGroup}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames("__wab_instance", sty.radioGroup)}
        defaultValue={"option1"}
        description={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pqIjQ
            )}
          >
            {"Description..."}
          </div>
        }
        onChange={async (...eventArgs) => {
          generateStateOnChangeProp($state, ["radioGroup", "value"]).apply(
            null,
            eventArgs
          );
          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        options={
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Radio
              className={classNames("__wab_instance", sty.radio__j8Roo)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k76Yl
                  )}
                >
                  {"Measuring"}
                </div>
              }
              value={"option1"}
            />
  
            <Radio
              className={classNames("__wab_instance", sty.radio___7DrHc)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___31S7N
                  )}
                >
                  {"Maintenance"}
                </div>
              }
              value={"option2"}
            />
  
            <Radio
              className={classNames("__wab_instance", sty.radio__r4Go)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iqkHf
                  )}
                >
                  {"Alarm"}
                </div>
              }
              value={"option3"}
            />
          </Stack__>
        }
        showLabel={false}
      />
      {/* <div className={`${classNames(sty.or_spacer_vertical,sty.right)}`}>
        <div className={`${classNames(sty.mask)}`}/>
      </div> */}
    </div>
  );
}

const PlasmicDescendants = {
  radioGroup: ["radioGroup", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRadioGroupComponent__ArgProps,
          internalVariantPropNames: PlasmicRadioGroupComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRadioGroupComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "radioGroup") {
    func.displayName = "PlasmicRadioGroupComponent";
  } else {
    func.displayName = `PlasmicRadioGroupComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioGroupComponent = Object.assign(
  // Top-level PlasmicRadioGroupComponent renders the root element
  makeNodeComponent("radioGroup"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicRadioGroupComponent
    internalVariantProps: PlasmicRadioGroupComponent__VariantProps,
    internalArgProps: PlasmicRadioGroupComponent__ArgProps
  }
);

export default PlasmicRadioGroupComponent;
/* prettier-ignore-end */

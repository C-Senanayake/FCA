// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: lt9TO1JSwwxD
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicPieChartComponent.module.css"; // plasmic-import: lt9TO1JSwwxD/css
import { Doughnut } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend, registerables } from "chart.js";
ChartJS.register(
  ...registerables
);
createPlasmicElementProxy;

export const PlasmicPieChartComponent__VariantProps = new Array();

export const PlasmicPieChartComponent__ArgProps = new Array();

const $$ = {};

function PlasmicPieChartComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const data = {
    labels: ["Cu", "Waste"],
    datasets: [
      {
        data: [65, 35], // Values for the two labels
        backgroundColor: ["#FB8F67", "#cce9ff"], // Colors for each segment
        hoverBackgroundColor: ["#FF4364", "#2A92DB"], // Hover colors
      },
    ],
  };

  const plugins = [{
    beforeDraw: function(chart) {
     var width = chart.width,
         height = chart.height,
         ctx = chart.ctx;
         ctx.restore();
         var fontSize = (height / 120).toFixed(2);
         ctx.font = fontSize + "em sans-serif";
         ctx.textBaseline = "top";
         ctx.fillStyle = "#FAB611";
         var text = "65%",
         textX = Math.round((width - ctx.measureText(text).width) / 3.5),
         textY = height / 2.23;
         ctx.fillText(text, textX, textY);
         ctx.save();
    } 
  }]

  const options = {
    responsive: true,
    maintainAspectRatio: false, // Allow custom height & width
    plugins: {
      legend: {
        position: "right",
        labels: {
          color: "#FAB611", // Change legend text color to #FAB611
          font: {
            size: 20, // Adjust legend font size
          },
        },
      },
    },
  };
  return (
     <div style={{display:"flex", flexDirection:"row", alignItems:"center", color:"#FAB611"}}>
        <div style={{display:"flex", flexDirection:"row", alignItems:"center", color:"#FAB611"}}>
           <div style={{display:"flex", flexDirection:"row", justifyContent:"center", alignItems:"center", color:"#FAB611", paddingTop:"8px", marginRight: "12px"}}>
            <span style={{width:"100px"}}>
              {"Cut-off Limit"}
            </span>
            <br/>
            <div style={{ display: "flex", alignItems: "center", border: "2px solid gold", borderRadius: "5px", overflow: "hidden", width: "120px" }}>
              <input
                type="text"
                value={"40"}
                style={{
                  flex: 1,
                  background: "transparent", // Transparent background
                  border: "none",
                  color: "gold", // Gold text
                  fontSize: "18px",
                  // padding: "8px",
                  textAlign: "center",
                  outline: "none",
                  width:"30px",
                  height:"30px"
                }}
              />
                <div style={{
                  background: "rgba(255, 255, 255, 0.1)", // Green background
                  color: "#fab611", // White text
                  padding: "6px 8px",
                  fontSize: "16px",
                  fontWeight: "bold",
                }}>
                  ppm
                </div>
            </div>
          </div>
           <div style={{ width: "350px", height: "230px" }}>
            <Doughnut data={data} options={options} plugins={plugins} />
           </div>
        </div>
     </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPieChartComponent__ArgProps,
          internalVariantPropNames: PlasmicPieChartComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPieChartComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPieChartComponent";
  } else {
    func.displayName = `PlasmicPieChartComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicPieChartComponent = Object.assign(
  // Top-level PlasmicPieChartComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicPieChartComponent
    internalVariantProps: PlasmicPieChartComponent__VariantProps,
    internalArgProps: PlasmicPieChartComponent__ArgProps
  }
);

export default PlasmicPieChartComponent;
/* prettier-ignore-end */

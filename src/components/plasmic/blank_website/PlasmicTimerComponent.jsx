// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: oRlJxjybarBR
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicTimerComponent.module.css"; // plasmic-import: oRlJxjybarBR/css
import { CountdownCircleTimer } from "react-countdown-circle-timer";
createPlasmicElementProxy;

export const PlasmicTimerComponent__VariantProps = new Array();

export const PlasmicTimerComponent__ArgProps = new Array();

const $$ = {};

function PlasmicTimerComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const renderTime = ({ remainingTime }) => {return (
      <div className="timer">
        {/* <div className="text">Remaining</div> */}
        <div className="value text-[#FAB611]" style={{color: "#FAB611", fontSize:"24px"}}>{remainingTime}</div>
        {/* <div className="text">seconds</div> */}
      </div>
    );
  };
  return (
    <CountdownCircleTimer
      isPlaying
      duration={10}
      colors={["#FAB611"]}
      onComplete={() => ({ shouldRepeat: true})}
      strokeWidth={8}
      size={75}
    >
      {renderTime}
    </CountdownCircleTimer>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTimerComponent__ArgProps,
          internalVariantPropNames: PlasmicTimerComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTimerComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTimerComponent";
  } else {
    func.displayName = `PlasmicTimerComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicTimerComponent = Object.assign(
  // Top-level PlasmicTimerComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTimerComponent
    internalVariantProps: PlasmicTimerComponent__VariantProps,
    internalArgProps: PlasmicTimerComponent__ArgProps
  }
);

export default PlasmicTimerComponent;
/* prettier-ignore-end */

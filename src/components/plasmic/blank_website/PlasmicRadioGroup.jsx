// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: 7zuKOIv73Phq
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseRadioGroup } from "@plasmicpkgs/react-aria/skinny/registerRadioGroup";
import Label from "../../Label"; // plasmic-import: MewiPDMI8RrB/component
import Radio from "../../Radio"; // plasmic-import: ejTEwJ4RVLY1/component
import Description from "../../Description"; // plasmic-import: nu9B9HqM8X5_/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicRadioGroup.module.css"; // plasmic-import: 7zuKOIv73Phq/css

createPlasmicElementProxy;

export const PlasmicRadioGroup__VariantProps = new Array();

export const PlasmicRadioGroup__ArgProps = new Array(
  "defaultValue",
  "showLabel",
  "showDescription",
  "disabled",
  "ariaLabel",
  "onChange",
  "label",
  "options",
  "description"
);

const $$ = {};

function PlasmicRadioGroup__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showLabel: true,
          showDescription: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "ariaRadioGroup.value",
        type: "readonly",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props["defaultValue"],
        onChangeProp: "onChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const [$ccVariants, setDollarCcVariants] = React.useState({
    disabled: false,
    readonly: false
  });
  const updateVariant = React.useCallback(changes => {
    setDollarCcVariants(prev => {
      if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
        return prev;
      }
      return { ...prev, ...changes };
    });
  }, []);
  return (
    <BaseRadioGroup
      data-plasmic-name={"ariaRadioGroup"}
      data-plasmic-override={overrides.ariaRadioGroup}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.ariaRadioGroup
      )}
      defaultValue={args.defaultValue}
      isDisabled={args.disabled}
      isReadOnly={$ccVariants["readonly"] ? true : undefined}
      onChange={async (...eventArgs) => {
        generateStateOnChangeProp($state, ["ariaRadioGroup", "value"]).apply(
          null,
          eventArgs
        );
      }}
      plasmicUpdateVariant={updateVariant}
      value={generateStateValueProp($state, ["ariaRadioGroup", "value"])}
    >
      {$props.showLabel ? (
        <Label
          data-plasmic-name={"label"}
          data-plasmic-override={overrides.label}
          className={classNames("__wab_instance", sty.label)}
        >
          {renderPlasmicSlot({
            defaultContents: "Label",
            value: args.label
          })}
        </Label>
      ) : null}
      {renderPlasmicSlot({
        defaultContents: (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bWa7M)}
          >
            <Radio
              className={classNames("__wab_instance", sty.radio__ofmgo)}
              label={"Option 1"}
              value={"option1"}
            />

            <Radio
              className={classNames("__wab_instance", sty.radio__x7QyQ)}
              label={"Option 2"}
              value={"option2"}
            />

            <Radio
              className={classNames("__wab_instance", sty.radio__fzKf)}
              label={"Option 3"}
              value={"option3"}
            />
          </Stack__>
        ),

        value: args.options
      })}
      {$props.showDescription ? (
        <Description
          data-plasmic-name={"description"}
          data-plasmic-override={overrides.description}
          className={classNames("__wab_instance", sty.description)}
        >
          {renderPlasmicSlot({
            defaultContents: "Description...",
            value: args.description
          })}
        </Description>
      ) : null}
    </BaseRadioGroup>
  );
}

const PlasmicDescendants = {
  ariaRadioGroup: ["ariaRadioGroup", "label", "description"],
  label: ["label"],
  description: ["description"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRadioGroup__ArgProps,
          internalVariantPropNames: PlasmicRadioGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRadioGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaRadioGroup") {
    func.displayName = "PlasmicRadioGroup";
  } else {
    func.displayName = `PlasmicRadioGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioGroup = Object.assign(
  // Top-level PlasmicRadioGroup renders the root element
  makeNodeComponent("ariaRadioGroup"),
  {
    // Helper components rendering sub-elements
    label: makeNodeComponent("label"),
    description: makeNodeComponent("description"),
    // Metadata about props expected for PlasmicRadioGroup
    internalVariantProps: PlasmicRadioGroup__VariantProps,
    internalArgProps: PlasmicRadioGroup__ArgProps
  }
);

export default PlasmicRadioGroup;
/* prettier-ignore-end */

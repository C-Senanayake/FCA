// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: QaSopisahUJc
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicProgressbarComponent.module.css"; // plasmic-import: QaSopisahUJc/css

import { Progress } from "rsuite"; 
import "rsuite/dist/rsuite.min.css"; 
import { Input } from "antd";
import { color } from "chart.js/helpers";
createPlasmicElementProxy;

export const PlasmicProgressbarComponent__VariantProps = new Array();

export const PlasmicProgressbarComponent__ArgProps = new Array();

const $$ = {};

function PlasmicProgressbarComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  
  const PostComponent = ({ children, color, style }) => (
    <div style={{ 
      // padding: "8px 12px", 
      background: color || "rgba(255, 0, 0, 0.2)", // Light red shade
      borderRadius: "0 4px 4px 0",
      // border: "1px solid #ccc",
      color: "black",
      // height:'40px',
      fontWeight: "bold",
      ...style 
    }}>
      {children}
    </div>
  );

  return (
    <>
      {/* <div style={{display:"flex", flexDirection:"column", justifyContent:"center", alignItems:"center", color:"#FAB611"}}>
        <div style={{display:"flex", flexDirection:"row", alignItems:"center", color:"#FAB611"}}>
          <Progress.Line 
            percent={80} 
            vertical={true}
            showInfo={false}
            strokeColor="#FAB611" 
            strokeWidth={14}
            style={{color:"#FAB611", height:110}}
          /> 
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__upEq6
            )}
          >
            {"836mm"}
          </div>
        </div>
        <div
          style={{width:"120px"}}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__upEq6
          )}
        >
          {"Material Level"}
        </div>
      </div>
      <div style={{display:"flex", flexDirection:"row", justifyContent:"center", alignItems:"center", color:"#FAB611"}}>
    
    </div> */}
    </>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProgressbarComponent__ArgProps,
          internalVariantPropNames: PlasmicProgressbarComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProgressbarComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProgressbarComponent";
  } else {
    func.displayName = `PlasmicProgressbarComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicProgressbarComponent = Object.assign(
  // Top-level PlasmicProgressbarComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProgressbarComponent
    internalVariantProps: PlasmicProgressbarComponent__VariantProps,
    internalArgProps: PlasmicProgressbarComponent__ArgProps
  }
);

export default PlasmicProgressbarComponent;
/* prettier-ignore-end */

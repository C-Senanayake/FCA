// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g22NpEkpt3JYcyPsqXfiy7
// Component: nh8gERyM6vlh
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ConveyorImageComponent from "../../ConveyorImageComponent"; // plasmic-import: 12lq9MvIPQ3z/component
import ProgressbarComponent from "../../ProgressbarComponent"; // plasmic-import: QaSopisahUJc/component
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import RadioGroupComponent from "../../RadioGroupComponent"; // plasmic-import: FrcvFACn13Uh/component
import TimerComponent from "../../TimerComponent"; // plasmic-import: oRlJxjybarBR/component
import LastResultTimeComponent from "../../LastResultTimeComponent"; // plasmic-import: g_aHnyxvdW1f/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g22NpEkpt3JYcyPsqXfiy7/projectcss
import sty from "./PlasmicFullStatusComponent.module.css"; // plasmic-import: nh8gERyM6vlh/css

createPlasmicElementProxy;

export const PlasmicFullStatusComponent__VariantProps = new Array();

export const PlasmicFullStatusComponent__ArgProps = new Array();

const $$ = {};

function PlasmicFullStatusComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >

      <div
        style={{
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
          width: "100vw",
          padding: "0 0px",
          color: "#FAB611",
        }}
      >
        {/* First Div */}
        <div style={{ width: "30%", display: "flex", justifyContent: "center" }}>
          <ConveyorImageComponent
            data-plasmic-name={"conveyorImageComponent"}
            data-plasmic-override={overrides.conveyorImageComponent}
            className={classNames("__wab_instance", sty.conveyorImageComponent)}
          />
        </div>
        <div className={`${classNames(sty.or_spacer_vertical,sty.right)}`}>
          <div className={`${classNames(sty.mask)}`}/>
        </div>

        {/* Second Div */}
        <div style={{ width: "20%", display: "flex", justifyContent: "center" }}>
        <div style={{display:"flex", flexDirection:"row", justifyContent:"center", alignItems:"center", color:"#FAB611"}}>
            {/* <div className={`${classNames(sty.or_spacer_vertical,sty.left)}`}>
              <div className={`${classNames(sty.mask)}`}></div>
            </div> */}
            <div style={{display:"flex", flexDirection:"column", columnGap: "20px" , justifyContent:"center", alignItems:"center", color:"#FAB611"}}>
              <div style={{display:"flex", flexDirection:"row", justifyContent:"center", alignItems:"center", color:"#FAB611", marginBottom:"6px"}}>
                <span style={{width:"160px", fontSize:"22px", fontWeight:"600"}}>
                  {"Material Name"}
                </span>
                <br/>
                <div style={{ display: "flex", alignItems: "center", border: "2px solid gold", borderRadius: "5px", overflow: "hidden", width: "140px" }}>
                    <input
                      type="text"
                      value={"Cu"}
                      style={{
                        flex: 1,
                        background: "transparent", // Transparent background
                        border: "none",
                        color: "gold", // Gold text
                        fontSize: "38px",
                        // padding: "8px",
                        textAlign: "center",
                        outline: "none",
                        width:"30px",
                        height:"45px"
                      }}
                    />
                  </div>
              </div>
              <div style={{display:"flex", flexDirection:"row", justifyContent:"center", alignItems:"center", color:"#FAB611"}}>
                  <span style={{width:"160px", fontSize:"22px", fontWeight:"600"}}>
                    {"Throughput"}
                  </span>
                  <br/>
                  <div style={{ display: "flex", alignItems: "center", border: "2px solid gold", borderRadius: "5px", overflow: "hidden", width: "140px" }}>
                    <input
                      type="text"
                      value={"77.1"}
                      style={{
                        flex: 1,
                        background: "transparent", // Transparent background
                        border: "none",
                        color: "gold", // Gold text
                        fontSize: "22px",
                        // padding: "8px",
                        textAlign: "center",
                        outline: "none",
                        width:"30px",
                        height:"45px"
                      }}
                    />

                      <div style={{
                        background: "rgba(255, 255, 255, 0.1)", // Green background
                        color: "#fab611", // White text
                        padding: "10px 8px",
                        fontSize: "20px",
                        fontWeight: "bold",
                      }}>
                        Tons/h
                      </div>
                  </div>
                </div>
              </div>
              {/* <div className={`${classNames(sty.or_spacer_vertical,sty.right)}`}>
                <div className={`${classNames(sty.mask)}`}></div>
              </div> */}
          </div>
        </div>
        <div className={`${classNames(sty.or_spacer_vertical,sty.right)}`}>
          <div className={`${classNames(sty.mask)}`}/>
        </div>

        {/* Third Div */}
        <div style={{ width: "20%", display: "flex", justifyContent: "center" }}>
          <RadioGroupComponent
            data-plasmic-name={"radioGroupComponent"}
            data-plasmic-override={overrides.radioGroupComponent}
            className={classNames("__wab_instance", sty.radioGroupComponent)}
          />
        </div>
        <div className={`${classNames(sty.or_spacer_vertical,sty.right)}`}>
          <div className={`${classNames(sty.mask)}`}/>
        </div>

        {/* Fourth Div */}
        <div
          style={{
            width: "30%",
            display: "flex",
            flexDirection: "row",
            alignItems: "center",
            justifyContent:"center"
          }}
          className={classNames(projectcss.all, sty.freeBox___1Sr4K)}
        >
          <LastResultTimeComponent
            data-plasmic-name={"lastResultTimeComponent"}
            data-plasmic-override={overrides.lastResultTimeComponent}
            className={classNames("__wab_instance", sty.lastResultTimeComponent)}
          />
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent:"center"
              }}
              className={classNames(projectcss.all, sty.freeBox___1Sr4K)}
            >
              <TimerComponent
                data-plasmic-name={"timerComponent"}
                data-plasmic-override={overrides.timerComponent}
                className={classNames("__wab_instance", sty.timerComponent)}
              />
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
              >
                {"Measurement Cycle"}
              </div>
            </div>
        </div>
        
        
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "conveyorImageComponent",
    "progressbarComponent",
    "progress",
    "radioGroupComponent",
    "img",
    "timerComponent",
    "text",
    "lastResultTimeComponent"
  ],

  conveyorImageComponent: ["conveyorImageComponent"],
  progressbarComponent: ["progressbarComponent"],
  progress: ["progress"],
  radioGroupComponent: ["radioGroupComponent"],
  img: ["img"],
  timerComponent: ["timerComponent"],
  text: ["text"],
  lastResultTimeComponent: ["lastResultTimeComponent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFullStatusComponent__ArgProps,
          internalVariantPropNames: PlasmicFullStatusComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFullStatusComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFullStatusComponent";
  } else {
    func.displayName = `PlasmicFullStatusComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicFullStatusComponent = Object.assign(
  // Top-level PlasmicFullStatusComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    conveyorImageComponent: makeNodeComponent("conveyorImageComponent"),
    progressbarComponent: makeNodeComponent("progressbarComponent"),
    progress: makeNodeComponent("progress"),
    radioGroupComponent: makeNodeComponent("radioGroupComponent"),
    img: makeNodeComponent("img"),
    timerComponent: makeNodeComponent("timerComponent"),
    text: makeNodeComponent("text"),
    lastResultTimeComponent: makeNodeComponent("lastResultTimeComponent"),
    // Metadata about props expected for PlasmicFullStatusComponent
    internalVariantProps: PlasmicFullStatusComponent__VariantProps,
    internalArgProps: PlasmicFullStatusComponent__ArgProps
  }
);

export default PlasmicFullStatusComponent;
/* prettier-ignore-end */
